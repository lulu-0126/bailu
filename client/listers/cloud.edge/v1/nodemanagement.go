// Copyright @ 2022 Lenovo. All rights reserved
// Confidential and Restricted
// This file was generated using one of kubebuilder templated ( https://github.com/kubernetes-sigs/kubebuilder/tree/master/pkg/plugins/golang/v2/scaffolds/internal/templates) distributed under the terms of Apache-2.0 license.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "igitlab.lenovo.com/lecp/mec/bailu/api/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeManagementLister helps list NodeManagements.
// All objects returned here must be treated as read-only.
type NodeManagementLister interface {
	// List lists all NodeManagements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeManagement, err error)
	// Get retrieves the NodeManagement from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodeManagement, error)
	NodeManagementListerExpansion
}

// nodeManagementLister implements the NodeManagementLister interface.
type nodeManagementLister struct {
	indexer cache.Indexer
}

// NewNodeManagementLister returns a new NodeManagementLister.
func NewNodeManagementLister(indexer cache.Indexer) NodeManagementLister {
	return &nodeManagementLister{indexer: indexer}
}

// List lists all NodeManagements in the indexer.
func (s *nodeManagementLister) List(selector labels.Selector) (ret []*v1.NodeManagement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeManagement))
	})
	return ret, err
}

// Get retrieves the NodeManagement from the index for a given name.
func (s *nodeManagementLister) Get(name string) (*v1.NodeManagement, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodemanagement"), name)
	}
	return obj.(*v1.NodeManagement), nil
}
