// Copyright @ 2022 Lenovo. All rights reserved
// Confidential and Restricted
// This file was generated using one of kubebuilder templated ( https://github.com/kubernetes-sigs/kubebuilder/tree/master/pkg/plugins/golang/v2/scaffolds/internal/templates) distributed under the terms of Apache-2.0 license.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	cloudedgev1 "igitlab.lenovo.com/lecp/mec/bailu/api/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNodeManagements implements NodeManagementInterface
type FakeNodeManagements struct {
	Fake *FakeCloudV1
}

var nodemanagementsResource = schema.GroupVersionResource{Group: "cloud.edge", Version: "v1", Resource: "nodemanagements"}

var nodemanagementsKind = schema.GroupVersionKind{Group: "cloud.edge", Version: "v1", Kind: "NodeManagement"}

// Get takes name of the nodeManagement, and returns the corresponding nodeManagement object, and an error if there is any.
func (c *FakeNodeManagements) Get(ctx context.Context, name string, options v1.GetOptions) (result *cloudedgev1.NodeManagement, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(nodemanagementsResource, name), &cloudedgev1.NodeManagement{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cloudedgev1.NodeManagement), err
}

// List takes label and field selectors, and returns the list of NodeManagements that match those selectors.
func (c *FakeNodeManagements) List(ctx context.Context, opts v1.ListOptions) (result *cloudedgev1.NodeManagementList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(nodemanagementsResource, nodemanagementsKind, opts), &cloudedgev1.NodeManagementList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &cloudedgev1.NodeManagementList{ListMeta: obj.(*cloudedgev1.NodeManagementList).ListMeta}
	for _, item := range obj.(*cloudedgev1.NodeManagementList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested nodeManagements.
func (c *FakeNodeManagements) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(nodemanagementsResource, opts))
}

// Create takes the representation of a nodeManagement and creates it.  Returns the server's representation of the nodeManagement, and an error, if there is any.
func (c *FakeNodeManagements) Create(ctx context.Context, nodeManagement *cloudedgev1.NodeManagement, opts v1.CreateOptions) (result *cloudedgev1.NodeManagement, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(nodemanagementsResource, nodeManagement), &cloudedgev1.NodeManagement{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cloudedgev1.NodeManagement), err
}

// Update takes the representation of a nodeManagement and updates it. Returns the server's representation of the nodeManagement, and an error, if there is any.
func (c *FakeNodeManagements) Update(ctx context.Context, nodeManagement *cloudedgev1.NodeManagement, opts v1.UpdateOptions) (result *cloudedgev1.NodeManagement, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(nodemanagementsResource, nodeManagement), &cloudedgev1.NodeManagement{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cloudedgev1.NodeManagement), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNodeManagements) UpdateStatus(ctx context.Context, nodeManagement *cloudedgev1.NodeManagement, opts v1.UpdateOptions) (*cloudedgev1.NodeManagement, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(nodemanagementsResource, "status", nodeManagement), &cloudedgev1.NodeManagement{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cloudedgev1.NodeManagement), err
}

// Delete takes name of the nodeManagement and deletes it. Returns an error if one occurs.
func (c *FakeNodeManagements) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(nodemanagementsResource, name), &cloudedgev1.NodeManagement{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNodeManagements) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(nodemanagementsResource, listOpts)

	_, err := c.Fake.Invokes(action, &cloudedgev1.NodeManagementList{})
	return err
}

// Patch applies the patch and returns the patched nodeManagement.
func (c *FakeNodeManagements) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *cloudedgev1.NodeManagement, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(nodemanagementsResource, name, pt, data, subresources...), &cloudedgev1.NodeManagement{})
	if obj == nil {
		return nil, err
	}
	return obj.(*cloudedgev1.NodeManagement), err
}
