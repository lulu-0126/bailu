// Copyright @ 2022 Lenovo. All rights reserved
// Confidential and Restricted
// This file was generated using one of kubebuilder templated ( https://github.com/kubernetes-sigs/kubebuilder/tree/master/pkg/plugins/golang/v2/scaffolds/internal/templates) distributed under the terms of Apache-2.0 license.

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	cloudedgev1 "igitlab.lenovo.com/lecp/mec/bailu/api/v1"
	versioned "igitlab.lenovo.com/lecp/mec/bailu/client/clientset/versioned"
	internalinterfaces "igitlab.lenovo.com/lecp/mec/bailu/client/informers/externalversions/internalinterfaces"
	v1 "igitlab.lenovo.com/lecp/mec/bailu/client/listers/cloud.edge/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// NodeManagementInformer provides access to a shared informer and lister for
// NodeManagements.
type NodeManagementInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.NodeManagementLister
}

type nodeManagementInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewNodeManagementInformer constructs a new informer for NodeManagement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNodeManagementInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredNodeManagementInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNodeManagementInformer constructs a new informer for NodeManagement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNodeManagementInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CloudV1().NodeManagements().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CloudV1().NodeManagements().Watch(context.TODO(), options)
			},
		},
		&cloudedgev1.NodeManagement{},
		resyncPeriod,
		indexers,
	)
}

func (f *nodeManagementInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredNodeManagementInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *nodeManagementInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&cloudedgev1.NodeManagement{}, f.defaultInformer)
}

func (f *nodeManagementInformer) Lister() v1.NodeManagementLister {
	return v1.NewNodeManagementLister(f.Informer().GetIndexer())
}
